<%-
model = type.map[:model].type
gen_type = type.map[:gen_type].type

base_conv_func = type.memo['base_conv_func'] || raise "type #{type.name} has no memo named 'base_conv_func'"

model_slice = model.package.types.detect do |t|
  t.is_a?(GoonModelGen::Golang::NamedSlice) &&
  (
    (t.base_type == model) ||
    (t.ptr_slice? && (t.base_type.target == model))
  )
end

if model_slice
  element_is_ptr = model_slice.ptr_slice?
  plural_model_type_name = model_slice.qualified_name
else
  element_is_ptr =
    !type.memo['model_slice_with_ptr'].nil? ? type.memo['model_slice_with_ptr'] :
    model.fields.any?{|f| !f.tags['goon'].nil? }
  plural_model_type_name = (element_is_ptr ? '[]*' : '[]') + model.qualified_name
end
-%>

func <%= model.name %>SliceToResultSlice(s *<%= plural_model_type_name %>) *[]*<%= gen_type.qualified_name(dependencies) %> {
  if s == nil {
    return nil
  }
  r := []*<%= gen_type.qualified_name(dependencies) %>{}
  for _, m := range *s {
    r = append(r, <%= base_conv_func %>(<%= element_is_ptr ? '' : '&' %>m))
  }
  return &r
}
